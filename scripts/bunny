#!/usr/bin/env bash

export RESET='\033[0m'

export RED='\033[31m'
export GREEN='\033[32m'
export BLUE='\033[34m'
export MAGENTA='\033[35m'

export BRIGHT_RED='\033[91m'
export BRIGHT_GREEN='\033[92m'
export BRIGHT_BLUE='\033[94m'

export BOLD='\033[1m'
export NO_BOLD='\033[21m'
export DIM='\033[2m'
export NO_DIM='\033[22m'
export ITALIC='\033[3m'
export NO_ITALIC='\033[23m'


# log
#
# Logs the parameters passed to STDERR
function log() {
    printf "%b\\n" "${*}" >&2
}

function error() {
  printf "%b\\n" "${RED}${BOLD}ERR:${RESET}${*}" >&2

  exit 1
}

# error_handler()
#
# Handles error when they are caught
function error_handler() {
    local -r exit_code="$?"
    local -r _line_number="$1"
    local -r command="$2"

    # shellcheck disable=SC2016
    if is_bound command && [[ "$command" != 'return $code' ]]; then
        log "  [${RED}x${RESET}] ${BOLD}ERROR ${DIM}${RED}$exit_code${RESET}${BOLD} → ${command}${RESET} "
    fi
    log ""

    for i in "${!BASH_SOURCE[@]}"; do
        if ! contains "errors.sh" "${BASH_SOURCE[$i]:-unknown}"; then
            log "    - ${FUNCNAME[$i]:-unknown}() ${ITALIC}${DIM}at line${RESET} ${BASH_LINENO[$i-1]:-unknown} ${ITALIC}${DIM}in${RESET} $(error_path "${BASH_SOURCE[$i]:-unknown}")"
        fi
    done
    log ""
}

# contains <find> <content>
# 
# given the "content" string, all other parameters passed in
# will be looked for in this content.
function contains() {
    local -r find="${1}"
    local -r content="${2}"

    if is_empty "$find"; then
        error "contains("", ${content}) function did not recieve a FIND string! This is an invalid call!" 1
    fi

    if is_empty "$content"; then
        debug "contains" "contains(${find},"") received empty content so always returns false"
        return 1;
    fi

    if [[ "${content}" =~ ${find} ]]; then
        debug "contains" "found: ${find}"
        return 0 # successful match
    fi

    debug "contains" "not found: ${find}"
    return 1
}


# catch_errors()
#
# Catches all errors found in a script -- including pipeline errors -- and
# sends them to an error handler to report the error.
function catch_errors() {
    set -Eeuo pipefail
    trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# allow_errors()
#
# Allows for non-zero return-codes to avoid being sent to the error_handler
# and is typically used to temporarily check on an external state from the shell
# where an error might be encountered but which will be handled locally
function allow_errors() {
    set +Eeuo pipefail
    trap - ERR
}


# debug <fn> <msg> <...>
# 
# Logs to STDERR when the DEBUG env variable is set
# and not equal to "false".
function debug() {
    local -r DEBUG=$(lc "${DEBUG:-}")
    if [[ "${DEBUG}" != "false" ]]; then
        if (( $# > 1 )); then
            local fn="$1"

            shift
            local regex=""
            local lower_fn="" 
            lower_fn=$(lc "$fn")
            regex="(.*[^a-z]+|^)$lower_fn($|[^a-z]+.*)"

            if [[ "${DEBUG}" == "true" || "${DEBUG}" =~ $regex ]]; then
                log "       ${GREEN}◦${RESET} ${BOLD}${fn}()${RESET} → ${*}"
            fi
        else
            log "       ${GREEN}DEBUG: ${RESET} → ${*}"
        fi
    fi
}

function has_characters() {
    local -r char_str="${1:?has_characters() did not recieve a CHARS string!}"
    local -r content="${2:?content expression not passed to has_characters()}"

    if [[ "$content" == *["$char_str"]* ]]; then
        return 0
    else
        return 1
    fi
}

function is_bound() {
    allow_errors
    local -n __test_by_ref=$1 2>/dev/null || { debug "is_bound" "unbounded ref";  return 1; }
    local -r by_val="${1}:-"
    local name="${!__test_by_ref}" 2>/dev/null
    local -r arithmetic='→+-=><%'
    if has_characters "${arithmetic}" "$1"; then
        debug "is_bound" "${name} is NOT bound"
        return 1
    else
        local idx=${!1} 2>/dev/null 
        local a="${__test_by_ref@a}" 

        if [[ -z "${idx}${a}" ]]; then
            debug "is_bound" "${name} is NOT bound: ${idx}, ${a}"
            catch_errors
            return 1
        else 
            debug "is_bound" "${name} IS bound: ${idx}, ${a}"
            catch_errors
            return 0
        fi
    fi
}

# lc() <str>
#
# converts the passed in <str> to lowercase
function lc() {
    local -r str="${1-}"
    echo "${str}" | tr '[:upper:]' '[:lower:]'
}

# not_empty() <test>
# 
# tests whether the <test> value passed in is an empty string (or is unset)
# and returns 0 when it is NOT empty and 1 when it is.
function not_empty() {
    if [ -z "$1" ] || [[ "$1" == "" ]]; then
        debug "not_empty" "WAS empty, returning 1/false"
        return 1
    else
        debug "not_empty" "was not empty [${#1} chars], returning 0/true"
        return 0
    fi
}

# is_array() <ref:var>
#
# tests whether the passed in variable reference is
# a base array.
#
# Note: this only works on later versions of bash which
# definitely means not v3 but also may exclude parts of v4
#
# Note: this check only works after the variable passed in
# is actually set and set -u is in effect
function is_array() {
    allow_errors
    local -n __var__=$1 2>/dev/null
    local -r test=${__var__@a} 2>/dev/null
    catch_errors

    if is_bound __var__; then
        if not_empty "$test" && [[ $test = a ]]; then
            debug "is_array" "is an array!"
            return 0; # true
        else
            debug "is_array" "' is not an array!"
            return 1; # false
        fi
    else
        debug "is_array" "is_array was called without a reference so returning false!"
        return 1
    fi
}

# is_empty() <test>
# 
# tests whether the <test> value passed in is an empty string (or is unset)
# and returns 0 when it is empty and 1 when it is NOT.
function is_empty() {
  if [ -z "$1" ] || [[ "$1" == "" ]]; then
      return 0
  else
      return 1
  fi
}

# file_exists <filepath>
#
# tests whether a given filepath exists in the filesystem
function file_exists() {
    local filepath="${1:?filepath is missing}"

    if [ -f "${filepath}" ]; then
        return 0;
    else
        return 1;
    fi
}

# has_command <cmd>
#
# checks whether a particular program passed in via $1 is installed 
# on the OS or not (at least within the $PATH)
function has_command() {
    local -r cmd="${1:?cmd is missing}"

    if command -v "${cmd}" &> /dev/null; then
        return 0
    else 
        return 1
    fi
}

# ends_with <look-for> <content>
function ends_with() {
    local -r look_for="${1:?No look-for string provided to ends_with}"
    local -r content="${2:-}"
    local -r no_suffix="${content%"${look_for}"}"

    if is_empty "${content}"; then
      error "call to ends_with(${look_for}) received no content to test!"  
    fi

    if [[ "${content}" == "${no_suffix}" ]]; then
        debug "ends_with" "false (\"${DIM}${look_for}${RESET}\")"
        return 1;
    else
        debug "ends_with" "true (\"${DIM}${look_for}${RESET}\")"
        return 0;
    fi
}

function push() {
    allow_errors
    # shellcheck disable=SC2178
    local -n __array__=$1
    # parameter for use when passed by value
    local -ra params=( "$@" )
    local -ra __params__=("${params[@]:1}")
    catch_errors

    __array__+=("${__params__[@]}")

}


function runtime_family() {
  local -r filepath="${1:?no filepath provided!}"
  if ends_with ".ts" "${filepath}"; then
    echo "ts"
  elif ends_with ".tsx" "${filepath}"; then 
    echo "ts"
  elif ends_with ".mts" "${filepath}"; then
    echo "ts"
  elif ends_with ".cts" "${filepath}"; then
    echo "ts"
  elif ends_with ".wasm" "${filepath}"; then
    echo "wasm"
  elif ends_with ".wat" "${filepath}"; then
    echo "wasm"
  elif ends_with ".js" "${filepath}"; then
    echo "js"
  elif ends_with ".mjs" "${filepath}"; then
    echo "js"
  elif ends_with ".cjs" "${filepath}"; then
    echo "js"
  else 
    error "unknown file type based on file extension: ${filepath}"
  fi
}

# MAIN CLI

# detect_runtime <file or ext> <ref:avail> <ref:unavail>
#
# detects which runtimes are available for a given file extension
# and which are not.
function detect_runtime {
  local -r filepath="${1:?no filepath provided}"
  local -n __avail=$2
  local -n __unavail=$3
  local -r family="$(runtime_family "${filepath}")" 
  local -a avail=()
  local -a unavail=()

  case "${family}" in

    ts)

      if has_command "bun"; then
        push avail "bun"
      else
        push unavail "bun"
      fi

      if has_command "deno"; then
        push avail "deno"
      else
        push unavail "deno"
      fi

      if has_command "tsx"; then
        push avail "tsx";
      else
        push unavail "tsx"
      fi

      if has_command "ts-node"; then
        push avail "ts-node";
      else
        push unavail "ts-node"
      fi
      
      if has_command "nix-shell"; then
        push avail "nix-shell";
      else
        push unavail "nix-shell"
      fi

      ;;
    
    wasm)
      if has_command "wasmer"; then
        push avail "wasmer";
      else
        push unavail "wasmer";
      fi

      if has_command 'wasmtime'; then 
        push avail 'wasmtime';
      else
        push unavail 'wasmtime';
      fi

      if has_command 'nix-shell'; then
        push avail 'nix-shell';
      else
        push unavail 'nix-shell';
      fi

      ;;

    js)

      if has_command "bun"; then
        push avail "bun"
      else
        push unavail "bun"
      fi

      if has_command 'node'; then
        push avail 'node';
      else
        push unavail 'node';
      fi

      if has_command 'deno'; then
        push avail 'deno';
      else
        push unavail 'deno';
      fi

      if has_command 'nix-shell'; then
        push avail 'nix-shell';
      else
        push unavail 'nix-shell';
      fi
      ;;

    *)
      error "Unknown file type passed in for bunny run: ${BOLD}${filepath}${RESET}"
  esac

  __avail=( "${avail[@]}" )
  __unavail=( "${unavail[@]}" )
}

